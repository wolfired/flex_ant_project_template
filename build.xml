<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	 Mar 10, 2014 3:54:12 P
	 LinkWu
	 ====================================================================== -->
<project default="help" basedir=".">
	<description>
		Flex/AS3 project template
	</description>

	<import file="build_setup.xml" />
	<import file="build_gen.xml" />
	<import file="build_ftp.xml" />

	<target name="help" description="Show help message">
	</target>

	<target name="menu" description="Show menu">
		<input message="Select the target..." validargs="clean,doc,help,build,deploy,wrap" addproperty="menu.target" defaultvalue="help" />
		<antcall target="${menu.target}" />
	</target>

	<target name="doc" depends="setup" description="Doc all">
		<asdoc output="${config.dir.ref}" package-description-file="${basedir}/package.xml" lenient="true" debug="${config.debug}" debug-password="${config.debug.password}" optimize="${config.optimize}" incremental="${config.incremental}" locale="${config.locale}" target-player="${config.player.version}" swf-version="${config.swf.version}" fork="true">
			<load-config filename="${config.flex_config.file}" />

			<doc-sources dir="${config.dir.src}">
				<include name="**/src/*" />
			</doc-sources>

			<external-library-path dir="${config.dir.playerglobal}" includes="**/*.swc" append="true" />

			<library-path dir="${config.dir.src}" includes="**/lib/*.swc" append="true" />
			<library-path dir="${config.dir.lib}" includes="**/*.swc" append="true" />
			<external-library-path dir="${config.dir.src}/" includes="**/rsl/*.swc" append="true" />
			<external-library-path dir="${config.dir.rsl}/" includes="**/*.swc" append="true" />

			<jvmarg line="${jvmarg.asdoc}" />
		</asdoc>
	</target>

	<target name="select" description="Build the selected">
		<input message="Please enter project name, delimit them with a comma:" addproperty="targets.name" defaultvalue="" />
		<java jar="${basedir}/ext/util_order/main.jar" fork="true" failonerror="true">
			<arg value="${basedir}"/>
			<arg value="${targets.name}"/>
			<jvmarg value="-Dfile.encoding=${file.encoding}"/>
		</java>
	</target>

	<target name="build" description="Build all">
		<java jar="${basedir}/ext/util_order/main.jar" fork="true" failonerror="true">
			<arg value="${basedir}"/>
			<jvmarg value="-Dfile.encoding=${file.encoding}"/>
		</java>
	</target>

	<target name="deploy" depends="setup" description="Deploy all">
		<foreach param="file" target="deploy_rsl" parallel="false" inheritall="true">
			<path>
				<fileset dir="${config.dir.rsl}" includes="*.swc" />
			</path>
		</foreach>

		<foreach param="path" target="deploy_module" parallel="${config.parallel}" maxthreads="${config.maxthread}" inheritall="true">
			<path>
				<dirset dir="${config.dir.src}">
					<depth max="0" min="0" />
				</dirset>
			</path>
		</foreach>
	</target>

	<target name="deploy_rsl">
		<basename file="${file}" property="real.file.name" suffix="swc" />

		<if>
			<or>
				<not>
					<available file="${config.dir.bin}/${real.file.name}.${config.rsl.postfix}" />
				</not>
				<uptodate targetfile="${file}" srcfile="${config.dir.bin}/${real.file.name}.${config.rsl.postfix}" />
			</or>
			<then>
				<unzip src="${file}" dest="${config.dir.bin}">
					<patternset>
						<include name="**/*.swf" />
					</patternset>
				</unzip>
				<move file="${config.dir.bin}/library.swf" tofile="${config.dir.bin}/${real.file.name}.${config.rsl.postfix}" verbose="${config.verbose}" />
				<touch file="${config.dir.bin}/${real.file.name}.${config.rsl.postfix}" />
			</then>
		</if>
	</target>

	<target name="deploy_module">
		<basename file="${path}" property="real.path.name" />
		<if>
			<available filepath="${config.dir.src}" file="${real.path.name}" type="dir" />
			<then>
				<ant dir="${config.dir.src}/${real.path.name}" antfile="${real.path.name}.xml" target="deploy" output="${config.dir.log}/${real.path.name}_deploy.log" />
			</then>
			<else>
				<echo>${config.dir.src}/${real.path.name} is not exist!!</echo>
			</else>
		</if>
	</target>

	<target name="up" depends="setup" description="Upload the swc">
		<antcall target="ftp_up" />
	</target>

	<target name="down" depends="setup" description="Download the swc">
		<antcall target="ftp_down" />
	</target>

	<target name="wrap" depends="setup" description="Wrap all">
		<antcall target="wrap_all" />
	</target>

	<target name="wrap_all">
		<foreach param="project.dir" target="wrap_one" parallel="${config.parallel}" maxthreads="${config.maxthread}" inheritall="true">
			<path>
				<dirset dir="${config.dir.src}">
					<depth max="0" min="0" />
				</dirset>
			</path>
		</foreach>
	</target>

	<target name="wrap_one">
		<basename file="${project.dir}" property="project.name" />
		<if>
			<and>
				<available filepath="${config.dir.src}" file="${project.name}" type="dir" />
				<not>
					<available file="${config.dir.src}/${project.name}/.islibrary"/>
				</not>
			</and>
			<then>
				<ant dir="${config.dir.src}/${project.name}" antfile="${project.name}.xml" target="wrapper" output="${config.dir.log}/${project.name}.log" />
			</then>
			<else>
			</else>
		</if>
	</target>

	<target name="clean" depends="setup" description="Clean all">
		<antcall target="clean_bin" />
		<antcall target="clean_log" />
		<antcall target="clean_ref" />
		<antcall target="clean_src" />
	</target>

	<target name="clean_bin">
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${config.dir.bin}">
				<exclude name=".gitkeep" />
				<include name="**/*" />
			</fileset>
		</delete>
	</target>

	<target name="clean_log">
		<delete deleteonexit="true" includeemptydirs="true" verbose="true">
			<fileset dir="${config.dir.log}">
				<exclude name=".gitkeep" />
				<include name="**/*" />
			</fileset>
		</delete>
	</target>

	<target name="clean_ref">
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${config.dir.ref}">
				<exclude name=".gitkeep" />
				<include name="**/*" />
			</fileset>
		</delete>
	</target>

	<target name="clean_src">
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${config.dir.src}">
				<include name="**/bin/*" />
				<include name="**/.lib/*" />
				<include name="**/.rsl/*" />
			</fileset>
		</delete>
	</target>

	<target name="clean_setting" depends="setup" description="Clean all setting">
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${config.dir.src}">
				<exclude name=".gitkeep" />
				<exclude name="**/.lib/" />
				<exclude name="**/.rsl/" />
				<exclude name="**/.islibrary" />
				<exclude name="**/.dependlib" />
				<exclude name="**/.dependrsl" />
				<include name="**/.*" />
				<include name="**/.*/" />
			</fileset>
		</delete>
	</target>

	<target name="drop" description="Drop build config">
		<delete deleteonexit="true">
			<fileset dir="${basedir}">
				<include name="config4*.properties" />
				<include name="flex_config_*.xml" />
			</fileset>
		</delete>
	</target>

	<target name="swc" depends="setup" description="New a swc project">
		<input message="Please enter some library name, delimit them with a comma:" addproperty="swcs.name" />

		<foreach target="auto_gen_swc_project" list="${swcs.name}" delimiter="," param="swc.name" trim="true" parallel="true" maxthreads="4" inheritall="true" />
	</target>

	<target name="swf" depends="setup" description="New a swf project">
		<input message="Please enter some project name, delimit them with a comma:" addproperty="swfs.name" />

		<foreach target="auto_gen_swf_project" list="${swfs.name}" delimiter="," param="swf.name" trim="true" parallel="true" maxthreads="4" inheritall="true" />
	</target>

	<target name="setting" depends="setup, clean_setting" description="Gen all setting">
		<foreach target="auto_gen_setting" param="project.dir" parallel="true" maxthreads="4" inheritall="true">
			<path>
				<dirset dir="${config.dir.src}">
					<depth max="0" min="0" />
				</dirset>
			</path>
		</foreach>
	</target>
</project>
